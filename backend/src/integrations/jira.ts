import axios, { AxiosInstance } from 'axios';
import { config } from '../config';
import { logger } from '../utils/logger';
import { Insight } from '../models';

export interface JiraIssue {
  id: string;
  key: string;
  self: string;
  fields: {
    summary: string;
    description: string;
    status: {
      name: string;
    };
  };
}

export class JiraService {
  private client: AxiosInstance | null = null;
  private isConfigured: boolean = false;

  constructor() {
    if (config.JIRA_HOST && config.JIRA_EMAIL && config.JIRA_API_TOKEN) {
      this.client = axios.create({
        baseURL: `${config.JIRA_HOST}/rest/api/3`,
        auth: {
          username: config.JIRA_EMAIL,
          password: config.JIRA_API_TOKEN,
        },
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
        },
      });
      this.isConfigured = true;
    } else {
      logger.warn('Jira integration not configured - missing required environment variables');
    }
  }

  async createIssue(insight: Insight): Promise<JiraIssue | null> {
    if (!this.isConfigured || !this.client) {
      logger.warn('Jira integration not available');
      return null;
    }

    try {
      const description = this.formatDescription(insight);
      
      const issueData = {
        fields: {
          project: {
            key: config.JIRA_PROJECT_KEY,
          },
          summary: `[Feature Scene] ${insight.title}`,
          description: {
            type: 'doc',
            version: 1,
            content: [
              {
                type: 'paragraph',
                content: [
                  {
                    type: 'text',
                    text: description,
                  },
                ],
              },
            ],
          },
          issuetype: {
            name: 'Task',
          },
          priority: {
            name: this.mapPriority(insight.priority),
          },
          labels: ['feature-scene', 'analytics', insight.category],
        },
      };

      const response = await this.client.post('/issue', issueData);
      
      logger.info(`Created Jira issue ${response.data.key} for insight ${insight.id}`);
      
      return {
        id: response.data.id,
        key: response.data.key,
        self: response.data.self,
        fields: {
          summary: issueData.fields.summary,
          description: description,
          status: {
            name: 'To Do',
          },
        },
      };
    } catch (error) {
      logger.error('Error creating Jira issue:', error);
      throw error;
    }
  }

  async getIssue(issueKey: string): Promise<JiraIssue | null> {
    if (!this.isConfigured || !this.client) {
      return null;
    }

    try {
      const response = await this.client.get(`/issue/${issueKey}`);
      return response.data;
    } catch (error) {
      logger.error(`Error fetching Jira issue ${issueKey}:`, error);
      return null;
    }
  }

  async updateIssue(issueKey: string, fields: any): Promise<void> {
    if (!this.isConfigured || !this.client) {
      return;
    }

    try {
      await this.client.put(`/issue/${issueKey}`, { fields });
      logger.info(`Updated Jira issue ${issueKey}`);
    } catch (error) {
      logger.error(`Error updating Jira issue ${issueKey}:`, error);
      throw error;
    }
  }

  private formatDescription(insight: Insight): string {
    return `Generated by Feature Scene Analytics

## Summary
${insight.summary}

## Pain Point Details
- Type: ${insight.painPointId}
- Category: ${insight.category}
- Priority: ${insight.priority}
- Effort: ${insight.effort}

## Recommendation
${insight.recommendation}

## Expected Impact
${insight.impact}

## Metrics
${Object.entries(insight.metrics)
  .map(([key, value]) => `- ${key}: ${value}`)
  .join('\n')}

## Detected
${insight.createdAt.toISOString()}

---
This issue was automatically created from user behavior analytics.`;
  }

  private mapPriority(priority: 'high' | 'medium' | 'low'): string {
    const priorityMap = {
      high: 'High',
      medium: 'Medium',
      low: 'Low',
    };
    return priorityMap[priority];
  }

  isAvailable(): boolean {
    return this.isConfigured;
  }
}

export const jiraService = new JiraService();